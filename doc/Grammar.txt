<start>     ->  <preamble> <first_body>
<preamble>  ->  require "ifj21"
<first_body> ->  <func> <body>
<first_body> ->  <func_noret> <body>
<first_body> ->  <func_declr> <body>
<first_body> ->  <func_call> <body>
<body>      ->  <func> <body>
<body>      ->  <func_declr> <body>
<body>      ->  <func_noret> <body>
<body>      ->  <func_call> <body>
<body>      ->  EOF
<func>      ->  function id ( <params> ) : <types> <state_list> end
<func_noret> -> function id ( <params> ) <state_list> end
<func_declr> ->  global id : function ( <params> ) : <types>
<func_call> ->  id ( <params> )
<params>    ->  eps
<params>    ->  <param> <params_n>
<params_n>  ->  eps
<params_n>  ->  , <param> <params_n>
<param>     ->  id : <data_type>
<types> ->  eps
<types> ->  <data_type>
<types> ->  <types_n>
<types_n>   ->  eps
<types_n>   ->  , <data_type> <types_n>
<data_type> ->  integer
<data_type> ->  string
<data_type> ->  nil
<data_type> ->  number
<state_list>    ->  eps
<state_list>    ->  <state> <state_list>
<state_list>    ->  return <return>
<state>     ->  local id : <types> <is_assign>
<state>     ->  id <after_id>
<state>     ->  if <expression> then <state_list> <after_if> 
<state>     ->  while <expression> do <state_list> end
<after_id>  ->  <id_n> = <expr_func>
<after_id>  ->  ( <func_param> )
<after_if>  ->  else <state_list> end
<is_assign> ->  eps
<is_assign> ->  = <declr>
<id_n>      ->  eps
<id_n>      ->  , id <id_n>
<declr>     ->  <expression>
<declr>     ->  id ( <func_param> )
<func_param>    -> eps
<func_param>    -> <expression> <func_param_n>
<func_param_n>  -> eps
<func_param_n>  -> , <expression> <func_param_n>
<expr_func> ->  <expression> <expression_n>
<expr_func> ->  id ( <func_param> )
<expression_n>  ->  eps
<expression_n>  ->  , <expression> <expression_n>
<return>    ->  eps
<return>    ->  id <ret_type>
<return>    ->  <expression> 
<ret_type>  ->  <id_n>
<ret_type>  ->  ( <func_param> )
<expression>    -> EXPRESSION