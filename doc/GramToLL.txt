%token do ifj21 else end function global if integer local nil number require return string then while lbr rbr identificator colon comma assign endoffile expression str
%%

START : PREAMBLE BODY ;

PREAMBLE : require ifj21 ;

BODY : FUNC BODY
 | FUNC_DECLR BODY
 | FUNC_CALL BODY
 | endoffile;

FUNC : function identificator lbr PARAMS rbr FUNC_TYPES ;

FUNC_TYPES : colon RET_TYPES STATE_LIST end 
 | STATE_LIST end ;

FUNC_DECLR : global identificator colon function lbr PARAMS rbr colon RET_TYPES ;

FUNC_CALL : identificator lbr PARAMS rbr ;

PARAMS : /*eps*/
 | PARAM PARAMS_N ;
PARAMS_N : /*eps*/
 | comma PARAM PARAMS_N ;

PARAM  : identificator colon DATA_TYPE ;

RET_TYPES : /*eps*/
 | DATA_TYPE
 | TYPES ;

TYPES  : /*eps*/
 | DATA_TYPE TYPES_N ;
TYPES_N  : /*eps*/
 | comma DATA_TYPE TYPES_N ;

DATA_TYPE : integer
 | string
 | nil
 | number ;

STATE_LIST : /*eps*/
 | STATE STATE_LIST ;

STATE : DECLR
 | if EXPR then STATE_LIST ELSE end
 | while EXPR do STATE_LIST end
 | return RETURN
 | identificator ID_STATE
 | local identificator ID_N colon TYPES assign INIT_FUNC ;

DECLR : local identificator ID_N colon TYPES ;

ID_N : /*eps*/
 | comma identificator ID_N ;

ID_STATE : lbr FUNC_PARAM rbr
 | ID_N assign INIT_FUNC ;

RETURN : /*eps*/
 | identificator ID_N 
 | EXPR ;

FUNC_PARAM : /*eps*/
 | EXPR FUNC_PARAM_N ;
FUNC_PARAM_N : /*eps*/
 | comma EXPR FUNC_PARAM_N ;

INIT_FUNC : STATE
 | identificator INIT_FUNC_ID
 | EXPR ;

INIT_FUNC_ID: ID_N 
 | lbr identificator ID_N rbr ;

ELSE : /*eps*/
 | else STATE_LIST ;

EXPR : expression ;