%token do ifj21 else end function global if integer local nil number require return string then while lbr rbr identificator colon comma assign endoffile expression%%

START : PREAMBLE BODY ;

PREAMBLE : require ifj21 ;

BODY : FUNC BODY
 | FUNC_DECLR BODY
 | FUNC_CALL BODY
 | endoffile;

FUNC : function identificator lbr PARAMS rbr FUNC_TYPES ;

FUNC_TYPES : colon TYPES STATE_LIST end 
 | STATE_LIST end ;

FUNC_DECLR : global identificator colon function lbr PARAMS rbr colon TYPES ;

FUNC_CALL : identificator lbr PARAMS rbr ;

PARAMS : /*eps*/
 | PARAM PARAMS_N ;
PARAMS_N : /*eps*/
 | comma PARAM PARAMS_N ;

PARAM  : identificator colon DATA_TYPE ;

TYPES : /*eps*/
 | DATA_TYPE TYPES_N;

TYPES_N  : /*eps*/
 | comma DATA_TYPE TYPES_N ;

DATA_TYPE : integer
 | string
 | nil
 | number ;

STATE_LIST : /*eps*/
 | STATE STATE_LIST 
 | return RETURN ;

STATE : local identificator colon TYPES IS_ASSIGN
 | identificator AFTER_ID 
 | if EXPR then STATE_LIST else STATE_LIST end
 | while EXPR do STATE_LIST end;

AFTER_ID : ID_N assign EXPR_FUNC
 | lbr FUNC_PARAM rbr ;

ID_N : /*eps*/
 | comma identificator ID_N ;

IS_ASSIGN : /*eps*/
 | assign DECLR ;

DECLR : EXPR
 | identificator lbr FUNC_PARAM rbr ;

FUNC_PARAM : /*eps*/
 | EXPR FUNC_PARAM_N ;

FUNC_PARAM_N : /*eps*/
 | comma EXPR FUNC_PARAM_N ;

EXPR_FUNC : EXPR EXPR_N 
 | identificator lbr FUNC_PARAM rbr ;

EXPR_N : /*eps*/
 | comma EXPR EXPR_N ;

RETURN : /*eps*/
 | identificator RET_TYPE
 | EXPR EXPR_N ;

RET_TYPE : ID_N
 | lbr FUNC_PARAM rbr ;

EXPR : expression ;